# Build stage
FROM node:16.20.0-alpine as build

# Set environment variables for better Node.js performance and stability
ENV NODE_ENV=production
ENV PATH /app/node_modules/.bin:$PATH
ENV CI=false
ENV GENERATE_SOURCEMAP=true

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY web/package*.json ./

# Install dependencies with clean npm install and enable verbose logging for debugging
RUN echo "Installing dependencies..." && \
    npm install --legacy-peer-deps --verbose && \
    npm install react-scripts@5.0.1 --save --verbose && \
    echo "Dependencies installed successfully."

# Verify react-scripts is installed
RUN if [ ! -f "node_modules/.bin/react-scripts" ]; then \
      echo "ERROR: react-scripts not installed properly"; \
      exit 1; \
    else \
      echo "react-scripts is installed at:"; \
      ls -la node_modules/.bin/react-scripts; \
    fi

# Copy source code
COPY web/ ./

# Create a .env file with production configurations
RUN echo "REACT_APP_API_URL=/api" > .env.production.local && \
    echo "REACT_APP_VERSION=$(date '+%Y%m%d-%H%M')" >> .env.production.local && \
    echo "Created .env.production.local:"  && \
    cat .env.production.local

# Build the application with detailed error output
RUN echo "Building React application..." && \
    SKIP_PREFLIGHT_CHECK=true npm run build

# Production stage
FROM nginx:stable-alpine

# Install useful debugging and monitoring tools
RUN apk add --no-cache curl bash vim htop tzdata && \
    cp /usr/share/zoneinfo/UTC /etc/localtime

# Create web app directory 
WORKDIR /usr/share/nginx/html

# Remove default nginx static assets
RUN rm -rf /usr/share/nginx/html/*

# Copy build files from build stage
COPY --from=build /app/build /usr/share/nginx/html

# Create fallback pages for error handling
RUN echo '<!DOCTYPE html><html><head><meta charset="utf-8"><title>Page Not Found</title><meta http-equiv="refresh" content="0; url=/"></head><body><p>Redirecting to home page...</p></body></html>' > /usr/share/nginx/html/404.html && \
    echo '<!DOCTYPE html><html><head><meta charset="utf-8"><title>Server Error</title><style>body{font-family:Arial,sans-serif;text-align:center;padding:50px;}h1{font-size:24px;}p{font-size:16px;}</style></head><body><h1>Server Error</h1><p>Sorry, something went wrong. Please try again later.</p></body></html>' > /usr/share/nginx/html/50x.html

# Copy nginx configuration - base config for standalone mode
COPY web/nginx.conf /etc/nginx/conf.d/default.conf

# Copy API proxy config for when running in Docker Compose
COPY web/api-proxy.conf /etc/nginx/api-proxy.conf

# Create health check script
RUN echo '#!/bin/sh\necho "OK"' > /usr/share/nginx/html/status && \
    chmod +x /usr/share/nginx/html/status

# Add a diagnostic script
RUN echo '#!/bin/bash\necho "==== NGINX CONFIG ===="\ncat /etc/nginx/conf.d/default.conf\necho "\n==== NGINX STATUS ===="\nnginx -t\necho "\n==== FILES IN HTML DIR ===="\nls -la /usr/share/nginx/html\necho "\n==== INDEX.HTML INFO ===="\nhead -20 /usr/share/nginx/html/index.html' > /usr/local/bin/diagnose && \
    chmod +x /usr/local/bin/diagnose

# Copy the entrypoint script
COPY web/docker-entrypoint.sh /docker-entrypoint.sh
# Ensure script has proper permissions and line endings
RUN chmod +x /docker-entrypoint.sh && \
    sed -i 's/\r$//' /docker-entrypoint.sh && \
    cat /docker-entrypoint.sh > /docker-entrypoint.sh.tmp && \
    mv /docker-entrypoint.sh.tmp /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh && \
    ls -la /docker-entrypoint.sh

# Environment variable to control whether to use API proxy
ENV USE_API_PROXY=false

# Expose port
EXPOSE 80

# Set the entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"] 